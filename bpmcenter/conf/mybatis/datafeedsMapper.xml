<?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper 
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="fixbpa">
	<select id="testMethod" resultType="java.util.Map"
		parameterType="java.util.Map">
		select * from DEMOTABLE where 1=1
		<if test="col1 != null">  
        	and COL1 like '%'||#{col1}||'%'  
    	</if>
		<if test="col2 != null">  
        	and COL2 like '%${col2}%'  
    	</if>  
    </select>
    
    <select id="flowInfo" resultType="java.util.Map"
		parameterType="java.util.Map">
		
	  select a.PROCESSDEFINITION_KEY,PROCESS_NAME,ALL_COUNT,DONE_COUNT,(ALL_COUNT-DONE_COUNT) as UNDONE_COUNT,case when DONE_COUNT = 0 then -1 else (SUM_TIME/DONE_COUNT) end as AVG_TIME,TERMINATION_COUNT  
	  from      
      ((select PROCESSDEFINITION_KEY,PROCESS_NAME,count(1) as ALL_COUNT,count(END_TIME) as DONE_COUNT,sum(WORK_TIME) as SUM_TIME 
	      from FIXBPA_FLOW_PROCESSINSTANCE 
		  where 1=1
		  	<if test="procName != null">  
	    		and PROCESS_NAME like '%${procName}%' 
			</if>
			<if test="dateStart != null">  
	    		and START_TIME >= #{dateStart}
			</if>
			<if test="dateEnd != null">  
				<![CDATA[and START_TIME <= #{dateEnd}]]>
			</if>
	      group by PROCESSDEFINITION_KEY,PROCESS_NAME) a 
  
      left join
      
      (select PROCESSDEFINITION_KEY,count(1) AS TERMINATION_COUNT
      from FIXBPA_FLOW_PROCESSINSTANCE 
      where INSTANCE_STATUS = 'TERMINATION'
        <if test="procName != null">  
	   		and PROCESS_NAME like '%${procName}%' 
		</if>
		<if test="dateStart != null">  
	   		and START_TIME >= #{dateStart}
		</if>
		<if test="dateEnd != null">  
			<![CDATA[and START_TIME <= #{dateEnd}]]>
		</if>
      group by PROCESSDEFINITION_KEY) b
      on a.PROCESSDEFINITION_KEY=b.PROCESSDEFINITION_KEY)
      
		<if test="timeOrder != null">  
			order by AVG_TIME ${timeOrder}
  		</if>
  		<if test="doneOrder != null">  
			order by DONE_COUNT ${doneOrder}
  		</if>
  		<if test="undoneOrder != null">  
     		order by UNDONE_COUNT ${undoneOrder}
  		</if>
  		<if test="allOrder != null">  
     		order by ALL_COUNT ${allOrder}
  		</if>
      
    </select>
    
    <select id="flowInfo_page" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(1) AS PAGE_SIZE 
		from (select count(1) from FIXBPA_FLOW_PROCESSINSTANCE 
				where 1=1
				<if test="procName != null">  
        			and PROCESS_NAME like '%${procName}%' 
	    		</if>
	    		<if test="dateStart != null">  
	        		and START_TIME >= #{dateStart}
	    		</if>
	    		<if test="dateEnd != null">  
        			<![CDATA[and START_TIME <= #{dateEnd}]]>
    			</if>
				group by PROCESSDEFINITION_KEY,PROCESS_NAME) tb
    </select>
    
    
    
	<select id="nodeInfo" resultType="java.util.Map"
		parameterType="java.util.Map">
		select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,NODE_ID,NODE_NAME,ALL_COUNT,DONE_COUNT,(ALL_COUNT-DONE_COUNT) as UNDONE_COUNT,case when DONE_COUNT = 0 then -1 else (SUM_TIME/DONE_COUNT) end as AVG_TIME 
		from (select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,NODE_ID,NODE_NAME,sum(ALL_COUNT) as ALL_COUNT,sum(DONE_COUNT) as DONE_COUNT,sum (SUM_TIME) as SUM_TIME 
				from (select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,NODE_ID,NODE_NAME,count(1) as ALL_COUNT,count(END_TIME) as DONE_COUNT, sum(WORK_TIME) as SUM_TIME 
						from 
						<choose>  
					        <when test="dateStart != null || dateEnd != null">  
					            (select t2.*
									  from FIXBPA_FLOW_PROCESSINSTANCE t1, fixbpa_flow_taskinstance t2
									 where t1.PROCESSINSTANCE_ID = t2.PROCESSINSTANCE_ID
						    		<if test="dateStart != null">  
						        		and t1.START_TIME >= #{dateStart}
						    		</if>
						    		<if test="dateEnd != null">  
					        			<![CDATA[and t1.START_TIME <= #{dateEnd}]]>
					    			</if>
									 ) mt
					        </when>  
					        <otherwise>  
					            fixbpa_flow_taskinstance
					        </otherwise>  
					    </choose>  
						where 1=1 
						<if test="procKey != null">  
			        		and PROCESSDEFINITION_KEY = #{procKey} 
			    		</if>
			    		<if test="procID != null">  
			        		and PROCESSDEFINITION_ID = #{procID} 
			    		</if>
						group by <if test="procID != null">PROCESSDEFINITION_ID,</if>PROCESSDEFINITION_KEY,NODE_ID,NODE_NAME 
						union 
					   select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,NODE_ID,NODE_NAME,0 as ALL_COUNT, 0 as DONE_COUNT, 0 as SUM_TIME
						from FIXBPA_FLOW_NODE
						where 1=1 
						<if test="procKey != null">  
			        		and PROCESSDEFINITION_KEY = #{procKey} 
			    		</if>
			    		<if test="procID != null">  
			        		and PROCESSDEFINITION_ID = #{procID} 
			    		</if> ) 
		 				group by <if test="procID != null">PROCESSDEFINITION_ID,</if>PROCESSDEFINITION_KEY,NODE_ID,NODE_NAME) tb2
    </select>
    
	<select id="nodeInfo_getProcName" resultType="java.lang.String"
		parameterType="java.lang.String">
		select distinct PROCESS_NAME from fixflow_def_processdefinition 
		where PROCESS_KEY= #{procKey} 		
    </select>
 
 	<select id="nodeDetail" resultType="java.util.Map"
		parameterType="java.util.Map">
		select * from 
			(select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,USER_NAME,NODE_ID,NODE_NAME,ALL_COUNT,DONE_COUNT,(ALL_COUNT-DONE_COUNT) as UNDONE_COUNT,case when DONE_COUNT = 0 then -1 else (SUM_TIME/DONE_COUNT) end as AVG_TIME from
				(select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,USER_NAME,NODE_ID,NODE_NAME,count(1) as ALL_COUNT,count(END_TIME) as DONE_COUNT, sum(WORK_TIME) as SUM_TIME 
				from 
				<choose>  
			        <when test="dateStart != null || dateEnd != null">  
			            (select t2.*
							  from FIXBPA_FLOW_PROCESSINSTANCE t1, fixbpa_flow_taskinstance t2
							 where t1.PROCESSINSTANCE_ID = t2.PROCESSINSTANCE_ID
				    		<if test="dateStart != null">  
				        		and t1.START_TIME >= #{dateStart}
				    		</if>
				    		<if test="dateEnd != null">  
			        			<![CDATA[and t1.START_TIME <= #{dateEnd}]]>
			    			</if>
							 ) mt
			        </when>  
			        <otherwise>  
			            fixbpa_flow_taskinstance
			        </otherwise>  
			    </choose>  
				where 1=1
				<if test="procKey != null">  
			    	and PROCESSDEFINITION_KEY = #{procKey}
			    </if>
			    <if test="procID != null">  
			    	and PROCESSDEFINITION_ID = #{procID} 
			    </if>
			    <if test="nodeID != null">  
			    	and NODE_ID = #{nodeID}
			    </if>
			    <if test="userName != null">  
        			and USER_NAME like '%${userName}%' 
	    		</if>
				group by <if test="procID != null">PROCESSDEFINITION_ID,</if>USER_NAME,PROCESSDEFINITION_KEY,NODE_ID,NODE_NAME) tb ) tb2 
				where 1=1
				<if test="timeStartSearchEnabled">  
			    	<![CDATA[and AVG_TIME >= #{secSumStart} and DONE_COUNT <> -1]]>
			    </if>
			    <if test="timeEndSearchEnabled">  
			    	<![CDATA[and AVG_TIME <= #{secSumEnd} and DONE_COUNT <> -1]]>
			    </if>
			    <if test="doneCountStart != null">  
			    	and DONE_COUNT >= #{doneCountStart}
			    </if>
			    <if test="doneCountEnd != null">  
			    	<![CDATA[and DONE_COUNT <= #{doneCountEnd}]]>
			    </if>
			    <if test="undoneCountStart != null">  
			    	and UNDONE_COUNT >= #{undoneCountStart}
			    </if>
			    <if test="undoneCountEnd != null">  
			    	<![CDATA[and UNDONE_COUNT <= #{undoneCountEnd}]]>
			    </if>
			    
				<if test="timeOrder != null">  
        			order by AVG_TIME ${timeOrder}
	    		</if>
	    		<if test="doneOrder != null">  
        			order by DONE_COUNT ${doneOrder}
	    		</if>
	    		<if test="undoneOrder != null">  
        			order by UNDONE_COUNT ${undoneOrder}
	    		</if>
	    		<if test="allOrder != null">  
        			order by ALL_COUNT ${allOrder}
	    		</if>
    </select>  
     
    <select id="nodeDetail_page" resultType="java.lang.Integer"
		parameterType="java.util.Map">
		select count(1) from 
			(select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,USER_NAME,NODE_ID,NODE_NAME,DONE_COUNT,(ALL_COUNT-DONE_COUNT) as UNDONE_COUNT,case when DONE_COUNT = 0 then -1 else (SUM_TIME/DONE_COUNT) end as AVG_TIME from 
				(select PROCESSDEFINITION_KEY<if test="procID != null">,PROCESSDEFINITION_ID</if>,USER_NAME,NODE_ID,NODE_NAME,count(1) as ALL_COUNT,count(END_TIME) as DONE_COUNT, sum(WORK_TIME) as SUM_TIME 
				from fixbpa_flow_taskinstance 
				where 1=1
				<if test="procKey != null">  
			    	and PROCESSDEFINITION_KEY = #{procKey} 
			    </if>
			    <if test="procID != null">  
			    	and PROCESSDEFINITION_ID = #{procID} 
			    </if>
			    <if test="nodeID != null">  
			    	and NODE_ID = #{nodeID} 
			    </if>
			    <if test="userName != null">  
        			and USER_NAME like '%${userName}%' 
	    		</if>
				group by <if test="procID != null">PROCESSDEFINITION_ID,</if>USER_NAME,PROCESSDEFINITION_KEY,NODE_ID,NODE_NAME) tb ) tb2 
				where 1=1
				<if test="timeStartSearchEnabled">  
			    	<![CDATA[and AVG_TIME >= #{secSumStart} and DONE_COUNT <> -1]]>
			    </if>
			    <if test="timeEndSearchEnabled">  
			    	<![CDATA[and AVG_TIME <= #{secSumEnd} and DONE_COUNT <> -1]]>
			    </if>
			    <if test="doneCountStart != null">  
			    	and DONE_COUNT >= #{doneCountStart}
			    </if>
			    <if test="doneCountEnd != null">  
			    	<![CDATA[and DONE_COUNT <= #{doneCountEnd}]]>
			    </if>
			    <if test="undoneCountStart != null">  
			    	and UNDONE_COUNT >= #{undoneCountStart}
			    </if>
			    <if test="undoneCountEnd != null">  
			    	<![CDATA[and UNDONE_COUNT <= #{undoneCountEnd}]]>
			    </if>
    </select>
    
   	<select id="nodeDetail_getNodeName" resultType="java.lang.String"
		parameterType="java.util.Map">
		select node_name from FIXBPA_FLOW_NODE 
		where processdefinition_key = #{procKey} and node_id = #{nodeID}	
    </select>
</mapper> 