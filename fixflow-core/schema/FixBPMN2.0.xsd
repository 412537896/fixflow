<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.omg.org/spec/BPMN/20100524/MODEL">
	<!--
		如果该值是
		unqualified，实例xml的根元素必须有命名空间的的限定，这个命名空间必须是schema中定义的targetNameSpace。但是其下子元素无须也不允许用命名空间前缀限定目标命名空间。
		子元素的命名空间为空命名空间。 如果该值是
		qualified，实例xml根元素及其下所有子元素都必须通过命名空间前缀限定目标命名空间。这个命名空间必须是schema中定义的targetNameSpace。
	-->
	<!--     重要提醒：error,Interface，ItemDefinitions和Message都需要定义在 <process>外边。可以参考实际流程和单元测试示例 ServiceTaskTest。 -->

	<!-- BPMN2.0 基本元素定义 -->

	<!-- 过程定义 -->
	<xsd:element name="process" type="tProcess"
		substitutionGroup="rootElement" />
	<xsd:complexType name="tProcess">
		<xsd:complexContent>
			<xsd:extension base="tCallableElement">
				<xsd:sequence>
					<xsd:element ref="auditing" minOccurs="0"
						maxOccurs="1" />
					<xsd:element ref="monitoring" minOccurs="0"
						maxOccurs="1" />
					<xsd:element ref="property" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="laneSet" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="flowElement" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="artifact" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="resourceRole" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="correlationSubscription"
						minOccurs="0" maxOccurs="unbounded" />
					<xsd:element name="supports" type="xsd:QName"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="processType" type="tProcessType"
					default="None" />
				<xsd:attribute name="isClosed" type="xsd:boolean"
					default="false" />
				<xsd:attribute name="isExecutable" type="xsd:boolean" />
				<xsd:attribute name="definitionalCollaborationRef"
					type="xsd:QName" use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tProcessType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="None" />
			<xsd:enumeration value="Public" />
			<xsd:enumeration value="Private" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- 子流程 -->
	<xsd:element name="subProcess" type="tSubProcess"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tSubProcess">
		<xsd:complexContent>
			<xsd:extension base="tActivity">
				<xsd:sequence>
					<xsd:element ref="laneSet" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="flowElement" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="artifact" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
				<!-- 子流程是否由事件触发 这期只考虑triggeredByEvent=false的默认情况 -->
				<xsd:attribute name="triggeredByEvent"
					type="xsd:boolean" default="false" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>



	<xsd:element name="baseElement" type="tBaseElement" />
	<xsd:complexType name="tBaseElement" abstract="true">
		<xsd:sequence>
			<!-- 文档元素定义 -->
			<xsd:element ref="documentation" minOccurs="0"
				maxOccurs="unbounded" />
			<!-- 扩展元素定义 -->
			<xsd:element ref="extensionElements" minOccurs="0"
				maxOccurs="1" />
		</xsd:sequence>
		<!-- 继承于这个基本定义的元素都会具有ID属性 -->
		<xsd:attribute name="id" type="xsd:ID" use="optional" />
		<!-- 可以自己定义属性 -->
		<xsd:anyAttribute namespace="##other" processContents="lax" />
	</xsd:complexType>

	<!-- BPMN2.0 扩展元素定义 -->
	<xsd:element name="extensionElements" type="tExtensionElements" />
	<xsd:complexType name="tExtensionElements">
		<xsd:sequence>
			<!-- BPMN2.0 扩展元素可以用于任意属性 -->
			<xsd:any namespace="##other" processContents="lax"
				minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<!-- BPMN2.0 文档元素定义 -->
	<xsd:element name="documentation" type="tDocumentation" />
	<xsd:complexType name="tDocumentation" mixed="true">
		<xsd:sequence>
			<!-- 文档元素可以拥有任何子节点 -->
			<xsd:any namespace="##any" processContents="lax"
				minOccurs="0" />
		</xsd:sequence>
		<!-- 文档元素可以必须有ID属性 -->
		<xsd:attribute name="id" type="xsd:ID" use="optional" />
		<!-- 文档元素可以必须有文档格式属性 -->
		<xsd:attribute name="textFormat" type="xsd:string"
			default="text/plain" />
	</xsd:complexType>

	<!-- BPMN2.0 流程元素定义-->
	<xsd:element name="flowElement" type="tFlowElement" />
	<xsd:complexType name="tFlowElement" abstract="true">
		<xsd:complexContent>
			<!--  流程元素继承于基本元素定义-->
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!--并含有审计元素子节点 审计元素只能属于prosess元素-->
					<xsd:element ref="auditing" minOccurs="0"
						maxOccurs="1" />
					<!--并含有监测元素子节点 审计元素只能属于prosess元素-->
					<xsd:element ref="monitoring" minOccurs="0"
						maxOccurs="1" />
					<!--并含有类别值元素子节点-->
					<xsd:element name="categoryValueRef"
						type="xsd:QName" minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<!--流程元素含有Name属性-->
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN2.0 流程节点定义-->
	<xsd:element name="flowNode" type="tFlowNode" />
	<xsd:complexType name="tFlowNode" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tFlowElement">
				<xsd:sequence>
					<!--  该属性标识FlowNode进入线条名称（不是ID） 可以有多个进入线条-->
					<xsd:element name="incoming" type="xsd:QName"
						minOccurs="0" maxOccurs="unbounded" />
					<!--  该属性标识FlowNode外出线条名称（不是ID） 这是一个有序的集合 类似原来线条排序 设计器必须能对外出线条排序-->
					<xsd:element name="outgoing" type="xsd:QName"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN 2.0 顺序流 既线条 用于连接两个流程节点 -->
	<xsd:element name="sequenceFlow" type="tSequenceFlow"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tSequenceFlow">
		<xsd:complexContent>
			<xsd:extension base="tFlowElement">
				<xsd:sequence>
					<!-- 条件表达式 -->
					<xsd:element name="conditionExpression"
						type="tExpression" minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				<!-- 来源FlowNode的id -->
				<xsd:attribute name="sourceRef" type="xsd:IDREF"
					use="required" />
				<!-- 目标FlowNode的id -->
				<xsd:attribute name="targetRef" type="xsd:IDREF"
					use="required" />
				<!--  是否是即时 在isExecutable=true的 process中该属性为true否则为false-->
				<xsd:attribute name="isImmediate" type="xsd:boolean"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>



	<!-- BPMN 2.0 活动 所有任务节点的祖先 -->
	<xsd:element name="activity" type="tActivity" />
	<xsd:complexType name="tActivity" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tFlowNode">
				<xsd:sequence>
					<!-- IO规范 -->
					<xsd:element ref="ioSpecification" minOccurs="0"
						maxOccurs="1" />
					<!-- 属性 -->
					<xsd:element ref="property" minOccurs="0"
						maxOccurs="unbounded" />
					<!-- 数据输入组合 -->
					<xsd:element ref="dataInputAssociation"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 数据输出组合 -->
					<xsd:element ref="dataOutputAssociation"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 资源和角色 先按节点处理人的概念理解 -->
					<xsd:element ref="resourceRole" minOccurs="0"
						maxOccurs="unbounded" />
					<!-- 循环特性定义 -->
					<xsd:element ref="loopCharacteristics"
						minOccurs="0" />
				</xsd:sequence>
				<!-- 定义活动是否用于做补偿处理 为true 该活动只有在检测到所在范围内的Compensation Event时才启动-->
				<xsd:attribute name="isForCompensation"
					type="xsd:boolean" default="false" />
				<!-- 启动时需要的到达的令牌数 默认值1 必须>=1 大于1为高级用法需谨慎使用 考察网关节点后决定是否使用>1的值 -->
				<xsd:attribute name="startQuantity" type="xsd:integer"
					default="1" />
				<!-- 结束时产生的令牌数 所有令牌从所有的外出流程线传出(假设流程线条件为真) -->
				<xsd:attribute name="completionQuantity"
					type="xsd:integer" default="1" />
				<!-- 默认流程线ID 默认流程线上的条件会被无视  -->
				<xsd:attribute name="default" type="xsd:IDREF"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- BPMN 2.0 流程节点IO规范定义 -->
	<xsd:element name="ioSpecification"
		type="tInputOutputSpecification" />
	<xsd:complexType name="tInputOutputSpecification">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="dataInput" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="dataOutput" minOccurs="0"
						maxOccurs="unbounded" />
					<xsd:element ref="inputSet" minOccurs="1"
						maxOccurs="unbounded" />
					<xsd:element ref="outputSet" minOccurs="1"
						maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- BPMN 2.0 数据输入 -->
	<xsd:element name="dataInput" type="tDataInput" />
	<xsd:complexType name="tDataInput">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="dataState" minOccurs="0"
						maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string"
					use="optional" />
				<!-- 被指向的itemDefinition元素  -->
				<xsd:attribute name="itemSubjectRef" type="xsd:QName" />
				<!-- 如果该元素指向一个itemDefinition元素 那么isCollection取被指向元素的isCollection属性值 -->
				<xsd:attribute name="isCollection" type="xsd:boolean"
					default="false" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN 2.0 数据输出 -->
	<xsd:element name="dataOutput" type="tDataOutput" />
	<xsd:complexType name="tDataOutput">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="dataState" minOccurs="0"
						maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string"
					use="optional" />
				<!-- 指向一个itemDefinition元素  -->
				<xsd:attribute name="itemSubjectRef" type="xsd:QName" />
				<!-- 如果该元素指向一个itemDefinition元素 那么isCollection取被指向元素的isCollection属性值 -->
				<xsd:attribute name="isCollection" type="xsd:boolean"
					default="false" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN 2.0 数据输入集 -->
	<xsd:element name="inputSet" type="tInputSet" />
	<xsd:complexType name="tInputSet">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 指定数据输入集合-->
					<xsd:element name="dataInputRefs" type="xsd:IDREF"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 指定活动开始时状态可以为unavailable的数据输入集合 该集合必须是dataInputRefs的子集 -->
					<xsd:element name="optionalInputRefs"
						type="xsd:IDREF" minOccurs="0" maxOccurs="unbounded" />
					<!-- 指定需在活动执行时进行计算求值的数据输入集合 该集合必须是dataInputRefs的子集 -->
					<xsd:element name="whileExecutingInputRefs"
						type="xsd:IDREF" minOccurs="0" maxOccurs="unbounded" />
					<!-- 指定当输入集合有效时 需要由活动创建的 输出集合 -->
					<xsd:element name="outputSetRefs" type="xsd:IDREF"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN 2.0 数据输出集 -->
	<xsd:element name="outputSet" type="tOutputSet" />
	<xsd:complexType name="tOutputSet">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 指定数据输出集合-->
					<xsd:element name="dataOutputRefs" type="xsd:IDREF"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 指定活动结束时不可以被创建的数据输出集合 该集合必须是dataOutputRefs的子集 -->
					<xsd:element name="optionalOutputRefs"
						type="xsd:IDREF" minOccurs="0" maxOccurs="unbounded" />
					<!-- 指定活动执行时可以被创建的数据输出集合 该集合必须是dataOutputRefs的子集 -->
					<xsd:element name="whileExecutingOutputRefs"
						type="xsd:IDREF" minOccurs="0" maxOccurs="unbounded" />
					<!-- 指定产生该数据输出集合前必须有效的数据输入集合 -->
					<xsd:element name="inputSetRefs" type="xsd:IDREF"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 数据状态 -->
	<xsd:element name="dataState" type="tDataState" />
	<xsd:complexType name="tDataState">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 属性 -->
	<xsd:element name="property" type="tProperty" />
	<xsd:complexType name="tProperty">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="dataState" minOccurs="0"
						maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" />
				<!-- 指向一个itemDefinition元素  注意是name-->
				<xsd:attribute name="itemSubjectRef" type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 数据组合 -->
	<xsd:element name="dataAssociation" type="tDataAssociation" />
	<xsd:complexType name="tDataAssociation">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 标识数据协会的来源。源必须是一个ItemAwareElement(应该就是itemDefinition 可能是不同版本命名变化，BPMN文档有误)-->
					<xsd:element name="sourceRef" type="xsd:IDREF"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 标识数据协会的来源。源必须是一个ItemAwareElement-->
					<xsd:element name="targetRef" type="xsd:IDREF"
						minOccurs="1" maxOccurs="1" />

					<xsd:element name="transformation"
						type="tFormalExpression" minOccurs="0" maxOccurs="1" />
					<xsd:element ref="assignment" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 数据输入组合 -->
	<xsd:element name="dataInputAssociation"
		type="tDataInputAssociation" />
	<xsd:complexType name="tDataInputAssociation">
		<xsd:complexContent>
			<xsd:extension base="tDataAssociation" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 数据输出组合 -->
	<xsd:element name="dataOutputAssociation"
		type="tDataOutputAssociation" />
	<xsd:complexType name="tDataOutputAssociation">
		<xsd:complexContent>
			<xsd:extension base="tDataAssociation" />
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 转让 -->
	<xsd:element name="assignment" type="tAssignment" />
	<xsd:complexType name="tAssignment">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 用于求值的来源的表达式 -->
					<xsd:element name="from" type="tExpression"
						minOccurs="1" maxOccurs="1" />
					<!-- 用于接收求值结果的表达式 -->
					<xsd:element name="to" type="tExpression"
						minOccurs="1" maxOccurs="1" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 资源角色 为了得到参数名和参数值的集合 参数值由表达式给出 表达式需要或不需要被求职-->
	<xsd:element name="resourceRole" type="tResourceRole" />
	<xsd:complexType name="tResourceRole">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:choice>
					<xsd:sequence>
						<!-- 关联到activity的资源 -->
						<xsd:element name="resourceRef"
							type="xsd:QName" />
						<!-- 资源的参数绑定 -->
						<xsd:element ref="resourceParameterBinding"
							minOccurs="0" maxOccurs="unbounded" />
					</xsd:sequence>
					<!-- 被用于资源的表达式 -->
					<xsd:element ref="resourceAssignmentExpression"
						minOccurs="0" maxOccurs="1" />
				</xsd:choice>
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 资源的参数绑定 -->
	<xsd:element name="resourceParameterBinding"
		type="tResourceParameterBinding" />
	<xsd:complexType name="tResourceParameterBinding">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 用于参数求值的表达式 -->
					<xsd:element ref="expression" minOccurs="1"
						maxOccurs="1" />
				</xsd:sequence>
				<!-- 指向由资源定义的参数名 ???-->
				<xsd:attribute name="parameterRef" type="xsd:QName"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 被用于资源的表达式 -->
	<xsd:element name="resourceAssignmentExpression"
		type="tResourceAssignmentExpression" />
	<xsd:complexType name="tResourceAssignmentExpression">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="expression" minOccurs="1"
						maxOccurs="1" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 资源参数集-->
	<xsd:element name="resource" type="tResource"
		substitutionGroup="rootElement" />
	<xsd:complexType name="tResource">
		<xsd:complexContent>
			<xsd:extension base="tRootElement">
				<xsd:sequence>
					<xsd:element ref="resourceParameter" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 资源参数-->
	<xsd:element name="resourceParameter" type="tResourceParameter" />
	<xsd:complexType name="tResourceParameter">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<!-- 查询参数名称-->
				<xsd:attribute name="name" type="xsd:string" />
				<!-- 插叙参数类型-->
				<xsd:attribute name="type" type="xsd:QName" />
				<!-- 是否必须-->
				<xsd:attribute name="isRequired" type="xsd:boolean" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="performer" type="tPerformer" substitutionGroup="resourceRole"/>
	<xsd:complexType name="tPerformer">
		<xsd:complexContent>
			<xsd:extension base="tResourceRole"/>
		</xsd:complexContent>
	</xsd:complexType>	
	
	<xsd:element name="humanPerformer" type="tHumanPerformer" substitutionGroup="performer"/>
	<xsd:complexType name="tHumanPerformer">
		<xsd:complexContent>
			<xsd:extension base="tPerformer"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="potentialOwner" type="tPotentialOwner" substitutionGroup="performer"/>
	<xsd:complexType name="tPotentialOwner">
		<xsd:complexContent>
			<xsd:extension base="tHumanPerformer"/>
		</xsd:complexContent>
	</xsd:complexType>
	
	
	
	<!-- 循环定义 -->
	<!-- 一个活动可以执行一次或重复执行，需要重复执行时必须有loopCharacteristics定义重复规则 -->
	<xsd:element name="loopCharacteristics" type="tLoopCharacteristics" />
	<xsd:complexType name="tLoopCharacteristics" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 标准循环 -->
	<xsd:element name="standardLoopCharacteristics"
		type="tStandardLoopCharacteristics"
		substitutionGroup="loopCharacteristics" />
	<xsd:complexType name="tStandardLoopCharacteristics">
		<xsd:complexContent>
			<xsd:extension base="tLoopCharacteristics">
				<xsd:sequence>
					<!-- 循环条件表达式 -->
					<xsd:element name="loopCondition" type="tExpression"
						minOccurs="0" />
				</xsd:sequence>
				<!-- 第一进入循环是否进行条件判断 -->
				<xsd:attribute name="testBefore" type="xsd:boolean"
					default="false" />
				<!-- 最大循环次数 -->
				<xsd:attribute name="loopMaximum" type="xsd:integer"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 多实例循环 -->
	<xsd:element name="multiInstanceLoopCharacteristics"
		type="tMultiInstanceLoopCharacteristics"
		substitutionGroup="loopCharacteristics" />
	<xsd:complexType name="tMultiInstanceLoopCharacteristics">
		<xsd:complexContent>
			<xsd:extension base="tLoopCharacteristics">
				<xsd:sequence>
					<!-- 循环基数 表达式 求值结果必须为int 用于控制将要产生的活动实例数-->
					<xsd:element name="loopCardinality"
						type="tExpression" minOccurs="0" maxOccurs="1" />
					<!-- 指向循环的数据输入  集合的中的每个数据项产生一个活动实例 必须是InputOutputSpecification的子集-->
					<xsd:element name="loopDataInputRef"
						type="xsd:QName" minOccurs="0" maxOccurs="1" />
					<!-- 指向循环的数据输出集合 -->
					<xsd:element name="loopDataOutputRef"
						type="xsd:QName" minOccurs="0" maxOccurs="1" />
					<!-- 循环的数据输入项  代表每个实例获得的loopDataInputRef中的单一数据项 必须保持类型定义的一致性 -->
					<xsd:element name="inputDataItem" type="tDataInput"
						minOccurs="0" maxOccurs="1" />
					<!-- 循环的数据输出项  代表每个实例获得的loopDataOutputRef中的单一数据项 必须保持类型定义的一致性-->
					<xsd:element name="outputDataItem"
						type="tDataOutput" minOccurs="0" maxOccurs="1" />
					<!-- 复合行为定义 -->
					<xsd:element ref="complexBehaviorDefinition"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 结束条件 该条件为true时取消所有未完成的活动实例 并产生一个令牌 -->
					<xsd:element name="completionCondition"
						type="tExpression" minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				
				<!-- 是否串行 标识多实例是串行的还是并行的 -->
				<xsd:attribute name="isSequential" type="xsd:boolean"
					default="false" />
				<!-- 多实例行为 -->
				<xsd:attribute name="behavior"
					type="tMultiInstanceFlowCondition" default="All" />
				<!-- 指向一个EventDefinition behavior="One"时抛出-->
				<xsd:attribute name="oneBehaviorEventRef"
					type="xsd:QName" use="optional" />
				<!-- 指向一个EventDefinition behavior="None"时抛出-->
				<xsd:attribute name="noneBehaviorEventRef"
					type="xsd:QName" use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 多实例行为 -->
	<!-- None  每个实例完成时抛出一个noneEvent -->
	<!-- One  第一个实例完成时抛出一个oneEvent -->
	<!-- All  不抛出事件 全部完成后产生新一个新令牌 -->
	<!-- 按complexBehaviorDefinition的 定义决定不抛或抛出哪个事件 -->
	<xsd:simpleType name="tMultiInstanceFlowCondition">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="None" />
			<xsd:enumeration value="One" />
			<xsd:enumeration value="All" />
			<xsd:enumeration value="Complex" />
		</xsd:restriction>
	</xsd:simpleType>

	<!-- 综合行为定义 -->
	<xsd:element name="complexBehaviorDefinition"
		type="tComplexBehaviorDefinition" />
	<xsd:complexType name="tComplexBehaviorDefinition">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 条件表达式 -->
					<xsd:element name="condition"
						type="tFormalExpression" minOccurs="1" maxOccurs="1" />
					<!-- 抛出事件 -->
					<xsd:element name="event" type="tImplicitThrowEvent"
						minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 明确抛出事件 -->
	<xsd:element name="implicitThrowEvent" type="tImplicitThrowEvent"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tImplicitThrowEvent">
		<xsd:complexContent>
			<xsd:extension base="tThrowEvent" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 所有原子任务节点的祖先  -->
	<xsd:element name="task" type="tTask"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tTask">
		<xsd:complexContent>
			<xsd:extension base="tActivity" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 业务规则任务 -->
	<xsd:element name="businessRuleTask" type="tBusinessRuleTask"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tBusinessRuleTask">
		<xsd:complexContent>
			<xsd:extension base="tTask">
				<xsd:attribute name="implementation"
					type="tImplementation" default="##unspecified" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 脚本任务 -->
	<xsd:element name="scriptTask" type="tScriptTask"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tScriptTask">
		<xsd:complexContent>
			<xsd:extension base="tTask">
				<xsd:sequence>
					<xsd:element ref="script" minOccurs="0"
						maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="scriptFormat" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	

	<!-- 服务任务 -->
	<xsd:element name="serviceTask" type="tServiceTask"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tServiceTask">
		<xsd:complexContent>
			<xsd:extension base="tTask">
				<xsd:attribute name="implementation"
					type="tImplementation" default="##WebService" />
				<!-- 指向提供服务的操作 -->
				<xsd:attribute name="operationRef" type="xsd:QName"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 用户任务 -->
	<xsd:element name="userTask" type="tUserTask"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tUserTask">
		<xsd:complexContent>
			<xsd:extension base="tTask">
				<xsd:sequence>
					<xsd:element ref="rendering" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
				<!-- 用默认值就可以 -->
				<xsd:attribute name="implementation"
					type="tImplementation" default="##unspecified" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 渲染 用途不明-->
	<xsd:element name="rendering" type="tRendering" />
	<xsd:complexType name="tRendering">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement" />
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 实现类型 注意属性值包含##  -->
	<xsd:simpleType name="tImplementation">
		<xsd:union memberTypes="xsd:anyURI">
			<xsd:simpleType>
				<xsd:restriction base="xsd:token">
					<!-- 未指定 -->
					<xsd:enumeration value="##unspecified" />
					<xsd:enumeration value="##WebService" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>

	<!-- 操作 可以任务节点调用的自动处理 -->
	<xsd:element name="operation" type="tOperation" />
	<xsd:complexType name="tOperation">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element name="inMessageRef" type="xsd:QName"
						minOccurs="1" maxOccurs="1" />
					<xsd:element name="outMessageRef" type="xsd:QName"
						minOccurs="0" maxOccurs="1" />
					<xsd:element name="errorRef" type="xsd:QName"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string"
					use="required" />
				<xsd:attribute name="implementationRef"
					type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 网关 -->
	<xsd:element name="gateway" type="tGateway" abstract="true" />
	<xsd:complexType name="tGateway">
		<xsd:complexContent>
			<xsd:extension base="tFlowNode">
				<!-- 网关指示 -->
				<xsd:attribute name="gatewayDirection"
					type="tGatewayDirection" default="Unspecified" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 网关指示 -->
	<xsd:simpleType name="tGatewayDirection">
		<xsd:restriction base="xsd:string">
			<!-- 有一个或多个入口和出口 -->
			<xsd:enumeration value="Unspecified" />
			<!-- 有多个入口一个出口 -->
			<xsd:enumeration value="Converging" />
			<!-- 有一个入口多个出口 -->
			<xsd:enumeration value="Diverging" />
			<!-- 有多个入口多个出口 -->
			<xsd:enumeration value="Mixed" />
		</xsd:restriction>
	</xsd:simpleType>


	<!-- 复杂网关 -->
	<xsd:element name="complexGateway" type="tComplexGateway"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tComplexGateway">
		<xsd:complexContent>
			<xsd:extension base="tGateway">
				<xsd:sequence>
					<!-- 激活条件 类似或节点和会签通过条件 -->
					<xsd:element name="activationCondition"
						type="tExpression" minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="default" type="xsd:IDREF" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 排他网关 -->
	<xsd:element name="exclusiveGateway" type="tExclusiveGateway"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tExclusiveGateway">
		<xsd:complexContent>
			<xsd:extension base="tGateway">
				<!-- 默认流程线 -->
				<xsd:attribute name="default" type="xsd:IDREF"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 包容网关 -->
	<xsd:element name="inclusiveGateway" type="tInclusiveGateway"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tInclusiveGateway">
		<xsd:complexContent>
			<xsd:extension base="tGateway">
				<xsd:attribute name="default" type="xsd:IDREF"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 并行网关 -->
	<xsd:element name="parallelGateway" type="tParallelGateway"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tParallelGateway">
		<xsd:complexContent>
			<xsd:extension base="tGateway" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 事件 -->
	<xsd:element name="event" type="tEvent"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tEvent" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tFlowNode">
				<xsd:sequence>
					<xsd:element ref="property" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 捕获事件 -->
	<xsd:element name="catchEvent" type="tCatchEvent" />
	<xsd:complexType name="tCatchEvent" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tEvent">
				<xsd:sequence>
					<!-- 数据输出集合 -->
					<xsd:element ref="dataOutput" minOccurs="0"
						maxOccurs="unbounded" />
					<!-- 将事件的数据分配给范围内的一个数据元素 -->
					<xsd:element ref="dataOutputAssociation"
						minOccurs="0" maxOccurs="unbounded" />
					<!-- 事件的数据输出 -->
					<xsd:element ref="outputSet" minOccurs="0"
						maxOccurs="1" />
					<!-- 附加的事件定义 -->
					<xsd:element ref="eventDefinition" minOccurs="0"
						maxOccurs="unbounded" />
					<!-- 附加的指向可重用的事件定义 -->
					<xsd:element name="eventDefinitionRef"
						type="xsd:QName" minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<!-- 仅在有多重定义事件中起 重用，标识是否需要等所有事件都捕获到了才开始实例化Process -->
				<xsd:attribute name="parallelMultiple"
					type="xsd:boolean" default="false" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 抛出事件 -->
	<xsd:element name="throwEvent" type="tThrowEvent" />
	<xsd:complexType name="tThrowEvent" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tEvent">
				<xsd:sequence>
					<!-- 数据输入集合 -->
					<xsd:element ref="dataInput" minOccurs="0"
						maxOccurs="unbounded" />
					<!-- 负责将事件范围内的一个数元素分配给事件数据 -->
					<xsd:element ref="dataInputAssociation"
						minOccurs="0" maxOccurs="unbounded" />
					<xsd:element ref="inputSet" minOccurs="0"
						maxOccurs="1" />
					<!-- 附加的事件定义 -->
					<xsd:element ref="eventDefinition" minOccurs="0"
						maxOccurs="unbounded" />
					<!-- 附加的指向可重用的事件定义 -->
					<xsd:element name="eventDefinitionRef"
						type="xsd:QName" minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 开始事件 -->
	<xsd:element name="startEvent" type="tStartEvent"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tStartEvent">
		<xsd:complexContent>
			<xsd:extension base="tCatchEvent">
				<!-- 是否中断 -->
				<xsd:attribute name="isInterrupting" type="xsd:boolean"
					default="true" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 结束事件 -->
	<xsd:element name="endEvent" type="tEndEvent"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tEndEvent">
		<xsd:complexContent>
			<xsd:extension base="tThrowEvent" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 事件定义 -->
	<xsd:element name="eventDefinition" type="tEventDefinition"
		substitutionGroup="rootElement" />
	<xsd:complexType name="tEventDefinition" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tRootElement" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 终止事件定义 -->
	<xsd:element name="terminateEventDefinition"
		type="tTerminateEventDefinition" substitutionGroup="eventDefinition" />
	<xsd:complexType name="tTerminateEventDefinition">
		<xsd:complexContent>
			<xsd:extension base="tEventDefinition" />
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 边界事件 -->
	<xsd:element name="boundaryEvent" type="tBoundaryEvent"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tBoundaryEvent">
		<xsd:complexContent>
			<xsd:extension base="tCatchEvent">
				<!-- 事件发生时取消属主活动-->
				<xsd:attribute name="cancelActivity" type="xsd:boolean"
					default="true" />
				<!-- 边界事件的属主活动-->
				<xsd:attribute name="attachedToRef" type="xsd:QName"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 时间事件定义 三个子元素只能用一个 -->
	<xsd:element name="timerEventDefinition"
		type="tTimerEventDefinition" substitutionGroup="eventDefinition" />
	<xsd:complexType name="tTimerEventDefinition">
		<xsd:complexContent>
			<xsd:extension base="tEventDefinition">
				<xsd:choice>
					<!-- 定时时间  <timeDate>2011-03-11T12:13:14</timeDate> -->
					<xsd:element name="timeDate" type="tExpression"
						minOccurs="0" maxOccurs="1" />
					<!-- 延时事件  <timeDuration>P10D</timeDuration> -->
					<xsd:element name="timeDuration" type="tExpression"
						minOccurs="0" maxOccurs="1" />
					<!-- 周期事件 <timeCycle>R3/2011-03-11/PT1D</timeCycle> -->
					<!-- 周期事件 从2011-03-11开始每隔1D执行一次，总共执行3次 -->
					<!-- 周期事件的定义还要继续 -->
					<xsd:element name="timeCycle" type="tExpression"
						minOccurs="0" maxOccurs="1" />
				</xsd:choice>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 数据项定义 -->
	<!-- <itemDefinition id="myItemDefinition1" > -->
	<!--  <jbpm:arg>  -->
	<!--    <jbpm:object expr="#{var1}" />  -->
	<!--  </jbpm:arg>  -->
	<!-- </itemDefinition>  -->

	<xsd:element name="itemDefinition" type="tItemDefinition"
		substitutionGroup="rootElement" />
	<xsd:complexType name="tItemDefinition">
		<xsd:complexContent>
			<xsd:extension base="tRootElement">
				<!-- 指向真正的数据结构 真正的结构由扩展元素定义??-->
				<xsd:attribute name="structureRef" type="xsd:QName" />
				<!-- 标识数据类型是否是集合 -->
				<xsd:attribute name="isCollection" type="xsd:boolean"
					default="false" />
				<!-- 数据项类型 -->
				<xsd:attribute name="itemKind" type="tItemKind"
					default="Information" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="tItemKind">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Information" />
			<xsd:enumeration value="Physical" />
		</xsd:restriction>
	</xsd:simpleType>


	<!--
		BPMN2 道 定义 Lane 道 道是池中的子分类并且能够完全展开至池,不 管是水平的还是垂直的。道被用于在一个池
		中对活动进行组织和分类。
	-->
	<xsd:element name="lane" type="tLane" />
	<xsd:complexType name="tLane">
		<xsd:complexContent>
			<!--  道 定义 继承于流程元素定义-->
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<!-- 隔离元素(暂时不知道是干什么的) -->
					<xsd:element name="partitionElement"
						type="tBaseElement" minOccurs="0" maxOccurs="1" />
					<!-- 流程节点引用集合,用来记录"道"里边的所存放的流程节点 -->
					<xsd:element name="flowNodeRef" type="xsd:IDREF"
						minOccurs="0" maxOccurs="unbounded" />
					<!--
						Lane"道" 里边用来存放 子"道"LaneSet 的对象 pool"池" 也可以存放 LaneSet 一组 Lane.
						Lane"道" 也可以存放 LaneSet 一组 Lane.
					-->
					<xsd:element name="childLaneSet" type="tLaneSet"
						minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				<!-- 道 的名称 -->
				<xsd:attribute name="name" type="xsd:string" />
				<!-- 隔离元素引用(暂时不知道是干什么的) -->
				<xsd:attribute name="partitionElementRef"
					type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="laneSet" type="tLaneSet" />
	<xsd:complexType name="tLaneSet">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="lane" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN2.0 概念根元素 -->
	<xsd:element name="rootElement" type="tRootElement" />
	<xsd:complexType name="tRootElement" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement" />
		</xsd:complexContent>
	</xsd:complexType>



	<!--    Expression  Begin  -->

	<xsd:element name="baseElementWithMixedContent"
		type="tBaseElementWithMixedContent" />
	<xsd:complexType name="tBaseElementWithMixedContent" abstract="true"
		mixed="true">
		<xsd:sequence>
			<xsd:element ref="documentation" minOccurs="0"
				maxOccurs="unbounded" />
			<xsd:element ref="extensionElements" minOccurs="0"
				maxOccurs="1" />
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="optional" />
		<xsd:anyAttribute namespace="##other" processContents="lax" />
	</xsd:complexType>

	<xsd:element name="expression" type="tExpression" />
	<xsd:complexType name="tExpression">
		<xsd:complexContent>
			<xsd:extension base="tBaseElementWithMixedContent" />
		</xsd:complexContent>
	</xsd:complexType>
	<!--    Expression  End     -->

	<xsd:element name="formalExpression" type="tFormalExpression"
		substitutionGroup="expression" />
	<xsd:complexType name="tFormalExpression">
		<xsd:complexContent>
			<xsd:extension base="tExpression">
				<xsd:attribute name="language" type="xsd:anyURI"
					use="optional" />
				<xsd:attribute name="evaluatesToTypeRef"
					type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!--     Expression  End     -->



	<xsd:element name="import" type="tImport" />
	<xsd:complexType name="tImport">
		<xsd:attribute name="namespace" type="xsd:anyURI"
			use="required" />
		<xsd:attribute name="location" type="xsd:string" use="required" />
		<xsd:attribute name="importType" type="xsd:anyURI"
			use="required" />
	</xsd:complexType>


	<!-- BPMN2.0 审计元素 只为process元素定义-->
	<xsd:element name="auditing" type="tAuditing" />
	<xsd:complexType name="tAuditing">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN2.0 监测元素 只为process元素定义-->
	<xsd:element name="monitoring" type="tMonitoring" />
	<xsd:complexType name="tMonitoring">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- BPMN2.0 类别值元素定义 (不知道是干嘛的)-->
	<xsd:element name="categoryValue" type="tCategoryValue" />
	<xsd:complexType name="tCategoryValue">
		<xsd:complexContent>
			<!--  类别值元素继承于基本元素定义-->
			<xsd:extension base="tBaseElement">
				<!--  类别值元素继承于基本元素定义,还可以含有value属性-->
				<xsd:attribute name="value" type="xsd:string"
					use="optional" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>




	<!-- 后期目标 -->
	<!-- 中间捕获事件 -->
	<xsd:element name="intermediateCatchEvent"
		type="tIntermediateCatchEvent" substitutionGroup="flowElement" />
	<xsd:complexType name="tIntermediateCatchEvent">
		<xsd:complexContent>
			<xsd:extension base="tCatchEvent" />
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 中间捕获事件 -->
	<xsd:element name="intermediateThrowEvent"
		type="tIntermediateThrowEvent" substitutionGroup="flowElement" />
	<xsd:complexType name="tIntermediateThrowEvent">
		<xsd:complexContent>
			<xsd:extension base="tThrowEvent" />
		</xsd:complexContent>
	</xsd:complexType>


	<!-- 错误事件定义 -->
	<xsd:element name="errorEventDefinition"
		type="tErrorEventDefinition" substitutionGroup="eventDefinition" />
	<xsd:complexType name="tErrorEventDefinition">
		<xsd:complexContent>
			<xsd:extension base="tEventDefinition">
				<!-- 该属性可以指向一个错误的name也可以指向一个错误的errorCode  -->
				<xsd:attribute name="errorRef" type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>





	<!-- 消息事件定义  把一个消息交给一个process-->
	<xsd:element name="messageEventDefinition"
		type="tMessageEventDefinition" substitutionGroup="eventDefinition" />
	<xsd:complexType name="tMessageEventDefinition">
		<xsd:complexContent>
			<xsd:extension base="tEventDefinition">
				<xsd:sequence>
					<!-- 消息的处理者 必须是另外一个process-->
					<xsd:element name="operationRef" type="xsd:QName"
						minOccurs="0" maxOccurs="1" />
				</xsd:sequence>
				<!-- 指向一个message，当process的isExecutable为true时必须提供该属性 -->
				<xsd:attribute name="messageRef" type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!--  消息 一个命名的数据项 -->
	<xsd:element name="message" type="tMessage"
		substitutionGroup="rootElement" />
	<xsd:complexType name="tMessage">
		<xsd:complexContent>
			<xsd:extension base="tRootElement">
				<xsd:attribute name="name" type="xsd:string" />
				<xsd:attribute name="itemRef" type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 错误 -->
	<xsd:element name="error" type="tError"
		substitutionGroup="rootElement" />
	<xsd:complexType name="tError">
		<xsd:complexContent>
			<xsd:extension base="tRootElement">
				<xsd:attribute name="name" type="xsd:string" />
				<xsd:attribute name="errorCode" type="xsd:string" />
				<xsd:attribute name="structureRef" type="xsd:QName" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<!-- 人工任务 -->
	<xsd:element name="manualTask" type="tManualTask"
		substitutionGroup="flowElement" />
	<xsd:complexType name="tManualTask">
		<xsd:complexContent>
			<xsd:extension base="tTask" />
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="artifact" type="tArtifact" />
	<xsd:complexType name="tArtifact" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement" />
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="callableElement" type="tCallableElement" />
	<xsd:complexType name="tCallableElement">
		<xsd:complexContent>
			<xsd:extension base="tRootElement">
				<xsd:sequence>
					<xsd:element name="supportedInterfaceRef"
						type="xsd:QName" minOccurs="0" maxOccurs="unbounded" />
					<xsd:element ref="ioSpecification" minOccurs="0"
						maxOccurs="1" />
					<xsd:element ref="ioBinding" minOccurs="0"
						maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="ioBinding" type="tInputOutputBinding" />
	<xsd:complexType name="tInputOutputBinding">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:attribute name="operationRef" type="xsd:QName"
					use="required" />
				<xsd:attribute name="inputDataRef" type="xsd:IDREF"
					use="required" />
				<xsd:attribute name="outputDataRef" type="xsd:IDREF"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="correlationSubscription"
		type="tCorrelationSubscription" />
	<xsd:complexType name="tCorrelationSubscription">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element ref="correlationPropertyBinding"
						minOccurs="0" maxOccurs="unbounded" />
				</xsd:sequence>
				<xsd:attribute name="correlationKeyRef" type="xsd:QName"
					use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="correlationPropertyBinding"
		type="tCorrelationPropertyBinding" />
	<xsd:complexType name="tCorrelationPropertyBinding">
		<xsd:complexContent>
			<xsd:extension base="tBaseElement">
				<xsd:sequence>
					<xsd:element name="dataPath"
						type="tFormalExpression" minOccurs="1" maxOccurs="1" />
				</xsd:sequence>
				<xsd:attribute name="correlationPropertyRef"
					type="xsd:QName" use="required" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

</xsd:schema>