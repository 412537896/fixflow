<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V5.0//EN'  
               '../dtd/docbook.dtd'> 
               
<chapter xml:id="bpmn_chapter">
  <title>BPMN2.0</title>

  <section xml:id="bpmn.info">
    <title>BPMN简介</title>
    <para><emphasis role="bold">介绍:</emphasis></para>
    <para>
      业务流程建模标记法（BPMN, Business Process Modeling Notation）是对象管理组织（OMG, Object Management Group）维护的关于业务流程建模的行业性标准。
      它创建在与UML的活动图非常相似的流程图法（flowcharting）基础上，为“业务流程图”（BPD, Business Process Diagram）中的特定业务流程提供一套图形化标记法。
    </para>
    <para> <emphasis role="bold">目标:</emphasis></para>
    <para>
     BPMN的目标是，通过提供一套既符合业务人员直观又能表现复杂流程语义的标记法，同时为技术人员和业务人员从事业务流程管理提供支持。
      BPMN的首要目的是提供全体业务相关者易于理解的标准标记法。业务相关者包括创造与梳理流程的业务分析师、负责实施流程的技术开发者、以及管理和监督流程的经理人。BPMN旨在充当公共语言，跨越业务流程设计和实施之间常见的鸿沟。
      当前有多种竞争的业务流程建模语言标准供建模过程和工具选用。广泛采用BPMN将有助于统一基本的业务流程概念的表达（例如：公共或私有的流程、编排），就像一些高级的业务概念一样（例如：例外处理、事务补偿）。
    </para>
    <para> <emphasis role="bold">BPMN2.0元素图</emphasis></para>
    <para>
      <link xlink:href="../../images/BPMN2_0_Poster_EN.png">查看完整图片</link>
      <mediaobject ><imageobject>
        <imagedata align="center" contentwidth="900"  fileref="images/BPMN2_0_Poster_EN.png"/>
      </imageobject></mediaobject>
    </para>

    <para> <emphasis role="bold">我们使用BPMN元素进行建模，BPMN的元素分为五个类别</emphasis></para>
    <para>
      <mediaobject ><imageobject>
        <imagedata align="center" contentwidth="800"   fileref="images/bpmn.info.1.png"/>
      </imageobject></mediaobject>
    </para>
    <para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">流对象(Flow Objects)</emphasis>: 流对象是定义业务流程的主要图形元素。它进一步细分为三个类别,分别是事件(Events)、活动(Activities)和网关(Gateways)。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">数据(Data)</emphasis>: 它分为四个类别:数据对象（Data Object)、数据输入(Data Inputs)、数据输出(Data Outputs)和数据存储(Data Stores)。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">连接对象(Connection Ojbects)</emphasis>: 用来把各个流对象或流对象与其他信息连接起来,它分为四种类别:顺序流(Sequence Flows)、消息流(Message Flows)、关联(Associations)和数据关联(Data Associations)。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">泳道(Swimlanes)</emphasis>: 用来区分不同部门或者不同参与者的功能和职责,Swimlanes包含两种类别：池(Pool)和道（Lane)。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">人工交付物(Artifacts)</emphasis>: 它用以给流程附加一些额外的信息,它分为两种类别：组(Group)和附注（Text Annotation)。
          </para>
        </listitem>
      </itemizedlist>    
    </para>
    <para>
      <emphasis role="bold">BPMN元素的三个层次</emphasis>
    </para>
    <para>
      根据流程引擎的实现顺序我们将BPMN元素分为了三个层次，分别是基本元素、核心元素和高级元素，通过基本元素的学习，我们能够开始进行简单的建模；通过核心元素的学习，能够满足我们平常大部分的建模需求；通过学习高级元素，我们能够看到BPMN所能处理的复杂情况。 
    </para>
    
    <para>
      <emphasis role="bold">基本元素:</emphasis>
      <mediaobject ><imageobject>
        <imagedata contentwidth="800" align="center" fileref="images/bpmn.info.2.png"/>
      </imageobject></mediaobject>
    </para>
    <para>
      <emphasis role="bold">核心元素:</emphasis>
      <mediaobject ><imageobject>
        <imagedata contentwidth="800" align="center" fileref="images/bpmn.info.3.png"/>
      </imageobject></mediaobject>
    </para>
    <para>
      <emphasis role="bold">高级元素:</emphasis>
      <mediaobject ><imageobject>
        <imagedata contentwidth="800" align="center" fileref="images/bpmn.info.4.png"/>
      </imageobject></mediaobject>
    </para>
  </section>
 
  <section xml:id="bpmn.extensions">
    <title>扩展元素</title>
    <para>
      bpmn2.0标准是一个各个厂商公认的业务建模标准,最终用户可以不受到来自供应商的绑定,遵循这个标准的厂商之间的产品可以平滑的过度。
      然而,bpmn2.0标准的的一个缺点就是,它始终是许多不同的公司之间的讨论和妥协的结果,对于一名开发人员来说BPMN 2.0 XML标准的定义,
      有时感觉它的结构或做事方式有点太麻烦了,并且很多工作流产品必须的流转配置信息,在标准里边没有很好的定义出来,所以,我们在bpmn2.0的基础之上遵循官方对bpmn2.0的扩展原则,
      对标准做了一些自己的扩展,FixFlow引擎的扩展都以"fixflow:"开头。
    </para>
    <para>开发者也可以给我们反馈对扩展的意见<link xlink:href="https://github.com/fixteam/fixflow/issues">GtiHub issues</link>,或提出自定义扩展的新思路。谁知道,有一天,你的想法可能会出现在FixFlow引擎中哦。</para>
  </section>
  
  <section xml:id="bpmn.event">
    <title>Events</title>
    <para>
      事件是在流程过程中发生的事情。事件总是以一个圆圈图形出现。在BPMN 2.0中，存在两个主要的事件类别：捕捉(Catching)或抛出(Throwing)事件。
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">捕捉(Catching)：</emphasis>:  执行过程中的事件到达时，它会等待一个触发发生。是指由不同的触发器内的图标或XML中的类型声明。捕获事件在视觉上区别于图标不填（即它是白色的）由内投掷事件。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">抛出(Throwing)：</emphasis>:  执行过程中的事件到达时，触发器被触发。是指由不同的触发器内的图标或XML中的类型声明。投掷项目在视觉上区别从一个醒目的事件内的图标，用黑色填充。
          </para>
        </listitem>
      </itemizedlist>
      对一个事件来说，通常会有产生该事件的原因（起因）和该事件所产生的影响（结果），例如一个消息的到来触发了一个事件并导致流程的启动，这个开始事件的起因是消息，它被称为消息开始事件，流程在结束时发送了一个消息，这个结束事件的结果是发送了消息，它被称为消息结束事件。我们使用不同的标识来区分事件的不同起因和结果。我们也使用事件不同的起因和结果来分类事件，完整的事件类型如下图所示：
      空开始事件没有指定事件的起因，它只是产生Token，触发流程的执行；空结束事件没有指定事件的结果，它消费掉Token，结束流程的执行。
    </para>
    <para><emphasis role="bold">Fixflow事件支持: </emphasis></para>
    <para> 在BPMN2.0官方定义的这些事件中Fixflow引擎现在支持：开始事件和结束事件和捕获事件。在后续的小节中我们会讨论到,其他的事件我们也将逐渐有计划的支持,开发计划请参见未来功能章节。<link linkend="future.info">未来的功能</link> </para>
    <para>
      <emphasis role="bold">BPMN2.0事件元素图:</emphasis>
      <mediaobject ><imageobject>
        <imagedata contentwidth="800" align="center" fileref="images/BPMN2_0_Poster_EN_EVENT.png"/>
      </imageobject></mediaobject>
    </para>
    
    <section xml:id="bpmn.event.EventDefinitions">
      <title>Event Definitions</title>
      <para>
        事件定义定义了一个事件的内容。没有事件定义，事件之间没有任何区别。例如：开始事件没有事件定义就没有指明究竟是什么启动过程。
        如果我们添加一个事件定义在开始事件里（计时器事件定义）那么我们就可以叫这个开始事件为(定时开始事件)。 
      </para>
    </section>
    
    <section xml:id="bpmn.event.TimerEventDefinitions">
      <title>Timer Event Definitions</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.event.StartEvents">
      <title>Start Events</title>
      <para>
        启动事件表示一个流程的开始。启动事件可以通过事件定义来确定如何启动流程(如通过一个消息启动、定时启动)。开始事件属于捕获型事件(Catching):一直在等待某个请求发生。
      </para>

    </section>
    
    <section xml:id="bpmn.event.NoneStartEvent">
      <title>None Start Event</title>
      <section xml:id="bpmn.event.NoneStartEvent.Description">
        
        <title>描述</title>
        
        <para>
          一个空的启动事件(None StartEvent),表示流程的启动是人工启动的,需要通过调用FixFlow引擎RunTimeService中的启动方法将流程发起。
        </para>
        <para>
          
          <programlisting language="java">
<![CDATA[//创建一个启动命令
StartProcessInstanceCommand startProcessInstanceCommand = new StartProcessInstanceCommand();
//设置需要启动的流程的KEY
startProcessInstanceCommand.setProcessDefinitionKey("Process_StartProcessInstanceTest");
//设置业务关联键
startProcessInstanceCommand.setBusinessKey("bk_StartProcessInstanceTest");
//设置流程的启动人
startProcessInstanceCommand.setStartAuthor("1200119390");
//启动流程，返回流程实例
ProcessInstance processInstance = runtimeService.noneStartProcessInstance(startProcessInstanceCommand);]]></programlisting>
        </para>
        <para>
          <emphasis>注意: </emphasis> 私有子流程(subprocess) 总是有一个空启动事件(None StartEvent).
        </para>
        
      </section>
      
      <section xml:id="bpmn.event.NoneStartEvent.GraphicalNotation">
        
        <title>图形符号</title>
        <para> 
          一个空启动事件是图形为一个圆,细边框空心圆圈的图标(即没有触发类型)。
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.NoneStartEvent.1.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
      
      <section xml:id="bpmn.event.NoneStartEvent.xml">
        <title>XML描述</title>
      <para>
        这是一个空启动事件的XML表示,没有任何子元素(其他开始事件类型都有一个元素声明的类型)。
        <programlisting language="xml">
<![CDATA[<bpmn2:startEvent id="StartEvent_1" name="启动">]]></programlisting>
      </para>
      </section>
      
      <section xml:id="bpmn.event.NoneStartEvent.designer">
        
        <title>设计器配置</title>
        <para> 
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.NoneStartEvent.CustomExtensions.1.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>

      <section xml:id="bpmn.event.NoneStartEvent.CustomExtensions">
        <title>空启动事件的扩展</title>
        <para>
          <emphasis>isPersistence: </emphasis>
          是否持久化,默认为true,当设置为false的时候,流程启动之后将不进行实例数据保存,但是在流程里边进行的其他数据数据操作可以正常使用,
          这个功能一般作用在频繁触发的定时启动任务以及不需要人工参与的自动化任务上,而且不需要记录实例数据的流程。
          <programlisting language="xml">
<![CDATA[<bpmn2:startEvent id="StartEvent_1" fixflow:isPersistence="false" name="启动">]]></programlisting>
          <emphasis>例如: </emphasis>一个频繁触发的定时启动流程。 参见:<link linkend="bpmn.event.TimerStartEvent">定时启动</link>
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.NoneStartEvent.CustomExtensions.2.png"/>
          </imageobject></mediaobject>
        </para>
      </section>
    </section>
    
    <section xml:id="bpmn.event.TimerStartEvent">
      <title>Timer Start Event</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.event.EndEvents">
      <title>End Events</title>
      <para>
        结束事件标志着一个流程或者子流程的结束。结束事件属于抛出(Throwing)型事件，这意味着当流程执行到结束事件时结果将被抛出。结果类型的由事件内的事件定义决定。
      </para>
    </section>
    
    <section xml:id="bpmn.event.NoneEndEvent">
      <title>None End Event</title>
      <section xml:id="bpmn.event.NoneEndEvent.Description">
        
        <title>描述</title>
        
        <para>
          一个空结束事件(NoneEndEvent)表示抛出的结果是不确定的。因此，流程引擎将只会结束当前执行路径(Token)。 
          在FixFlow引擎中,流程执行到空结束事件(NoneEndEvent)的时候,当前<link linkend="bpmn.FixFlow.ProcessEngine"><emphasis>令牌(Token)</emphasis></link>会被结束,如果当前令牌(Token)是根令牌(RootToken)
          ,则整个流程实例将会被结束,否则只会结束这个分支令牌(ChildToken),流程实例结束的时候会触发 <link linkend="bpmn.FixFlow.ProcessEngine.Event"><emphasis>实例结束事件(process-end)</emphasis></link>。
        </para>
      
      </section>
      <section xml:id="bpmn.event.NoneEndEvent.GraphicalNotation">
        
        <title>图形符号</title>
        <para> 
          一个空结束事件(NoneEndEvent)是粗的空心的圆圈都成的的图标(没有事件定义)。
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.NoneEndEvent.1.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
      
      <section xml:id="bpmn.event.NoneEndEvent.xml">
        <title>XML描述</title>
        <para>
          这是一个空结束事件(NoneEndEvent)的XML表示,没有任何子元素(其他开始事件类型都有一个元素声明的类型)。
          <programlisting language="xml"><![CDATA[<bpmn2:endEvent id="EndEvent_1" name="结束">]]></programlisting>
        </para>
      </section>
      
      <section xml:id="bpmn.event.NoneEndEvent.designer">
        
        <title>设计器配置</title>
        <para> 
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.NoneEndEvent.designer.1.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
    </section>
    
    <section xml:id="bpmn.event.TerminateEndEvent">
      <title>Terminate End Event</title>
      <section xml:id="bpmn.event.TerminateEndEvent.Description">
        
        <title>描述</title>
        
        <para>
          终止结束事件(Terminate End Event)表示流程走到这里的时候,不仅仅会结束当前的分支,而且还会直接结束整个流程实例,
          不管当前走到结束的是 分支令牌(ChildToken) 还是 根令牌(RootToken) 都会直接结束整个流程实例,并触发流程
          <link linkend="bpmn.FixFlow.ProcessEngine.Event"><emphasis>实例结束事件(process-end)</emphasis></link>。 
        </para>
        <para>
          关于分支令牌(ChildToken)、根令牌(RootToken)、并发、合并、分支 请参见 <link linkend="bpmn.FixFlow.ProcessEngine"><emphasis>流程内核原理</emphasis></link>
        </para>
        
      </section>
      <section xml:id="bpmn.event.TerminateEndEvent.GraphicalNotation">
        
        <title>图形符号</title>
        <para> 
          一个空结束事件(NoneEndEvent)是粗的空心的圆圈都成的的图标(没有事件定义)。
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.TerminateEndEvent.1.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
      
      <section xml:id="bpmn.event.TerminateEndEvent.xml">
        <title>XML描述</title>
        <para>
          这是一个空结束事件(NoneEndEvent)的XML表示,没有任何子元素(其他开始事件类型都有一个元素声明的类型)。
          <programlisting language="xml"><![CDATA[<bpmn2:endEvent id="EndEvent_1" name="结束">
  <bpmn2:terminateEventDefinition id="TerminateEventDefinition_1"/>
</bpmn2:endEvent>]]></programlisting>
        </para>
      </section>
      
      <section xml:id="bpmn.event.TerminateEndEvent.designer">
        
        <title>设计器配置</title>
        <para> 
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.event.NoneEndEvent.designer.1.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
    </section>
    
    <section xml:id="bpmn.event.BoundaryEvents">
      <title>Boundary Events</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.event.TimerBoundaryEvent">
      <title>Timer Boundary Event</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.event.IntermediateCatchingEventst">
      <title>Intermediate Catching Eventst</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.event.TimerIntermediateCatchingEvent">
      <title>Timer Intermediate Catching Event</title>
      <para>
        
      </para>
    </section>




  </section>
  
  <section xml:id="bpmn.SequenceFlow">
    <title>Sequence Flow</title>
    
    <section xml:id="bpmn.Description">
      <title>描述</title>
      <para>
        顺序流是流程中两个元素之间的连接。令牌通过顺序流流转到下面的节点上。一个节点后面可以有多个顺序流,当条件都满足的时候会产生并行的执行。 
      </para>
    </section>

    <section xml:id="bpmn.SequenceFlow.GraphicalNotation">
      <title>图形符号</title>
      <para> 
        一个顺序流可视化作为一个从源元素对目标元素的箭头。箭头始终指向朝着既定目标。 
        <mediaobject ><imageobject>
          <imagedata align="center"  fileref="images/bpmn.SequenceFlow.1.png"/>
        </imageobject></mediaobject>
      </para>
    </section>
    
    <section xml:id="bpmn.SequenceFlow.XMLRepresentation">
      <title>XML描述</title>
      <para>
          这是一个空结束事件(NoneEndEvent)的XML表示,没有任何子元素(其他开始事件类型都有一个元素声明的类型)。
          <programlisting language="xml"><![CDATA[<bpmn2:sequenceFlow id="SequenceFlow_3" name="" sourceRef="UserTask_1" targetRef="UserTask_2"/>]]></programlisting>
      </para>
    </section>
    
    <section xml:id="bpmn.SequenceFlow.designer">
      
      <title>设计器配置</title>
      <para> 
        <mediaobject ><imageobject>
          <imagedata align="center"  fileref="images/bpmn.SequenceFlow.2.png"/>
        </imageobject></mediaobject>
      </para>
      
    </section>

    
    
    <section xml:id="bpmn.SequenceFlow.ConditionalSequenceFlow">
      <title>条件序列流</title>
      <section xml:id="bpmn.SequenceFlow.ConditionalSequenceFlow.Description">
        <title>描述</title>
        <para>
          一个顺序流(SequenceFlow)上可以定义条件,当条件返回为true则允许通过,返回false则不允许通过。
          当节点后面多条线都满足条件将产生一个并发(有几条线满足则产生几个并发)。
        </para>
        <para>注:以上适用于非网关节点的连接,网关会根据类型对线条的判断产生影响。</para>
      </section>


      
      <section xml:id="bpmn.SequenceFlow.ConditionalSequenceFlow.SequenceFlow.GraphicalNotation">
        <title>图形符号</title>
        <para> 
          一个有条件的序列流图形为一个常规序列流左边加上一个小钻石开始。
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.SequenceFlow.ConditionalSequenceFlow.1.png"/>
          </imageobject></mediaobject>
        </para>
      </section>
      
      <section xml:id="bpmn.SequenceFlow.ConditionalSequenceFlow.SequenceFlow.XMLRepresentation">
        <title>XML描述</title>
        <para>
          这是一个空结束事件(NoneEndEvent)的XML表示,没有任何子元素(其他开始事件类型都有一个元素声明的类型)。
          <programlisting language="xml"><![CDATA[<bpmn2:sequenceFlow id="SequenceFlow_5" name="" sourceRef="StartEvent_2" targetRef="UserTask_1">
  <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression">1==1</bpmn2:conditionExpression>
</bpmn2:sequenceFlow>]]></programlisting>
        </para>
      </section>
      
      <section xml:id="bpmn.SequenceFlow.ConditionalSequenceFlow.SequenceFlow.designer">
        
        <title>设计器配置</title>
        <para> 
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.SequenceFlow.ConditionalSequenceFlow.2.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
    </section>
    
    <section>
      <title>序列流的扩展</title>
      <para>
        <emphasis>orderId:</emphasis>顺序流的排序号,当一个节点后面有多个顺序流的时候,会按照顺序流的排序号进行验证,越小的越先参与计算。网关有自己的计算逻辑,请参见 <link linkend="bpmn.Gateways">网关章节</link>。
        <programlisting language="xml"><![CDATA[<bpmn2:sequenceFlow id="SequenceFlow_3" name="" fixflow:orderId="1" sourceRef="UserTask_1" targetRef="UserTask_2"/>]]></programlisting>
      </para>
    </section>
    
  </section>
  
  <section xml:id="bpmn.Gateways">
    <title>Gateways</title>
    <para>
      　　网关是用来控制流程分支执行的(令牌的分支执行)。网关能够合并或分散令牌。网关是图形为一个菱形,内部为一个图标。这个图标显示了网关的类型。
    </para>
    <para>
    <mediaobject ><imageobject>
      <imagedata align="center"  fileref="images/bpmn.Gateways.1.png"/>
    </imageobject></mediaobject>
    </para>
    <section xml:id="bpmn.ExclusiveGateway">
      <title>Exclusive Gateway</title>
      
      
      
      <section xml:id="bpmn.ExclusiveGateway.Description">
        <title>描述</title>
        <para>
          排他网关(ExclusiveGateway)在分裂时，只会选择一个输出顺序流传递Token,会按照后面线条的排序号优先计算,第一个满足条件的会将Token传递过去,排他网关在聚合时，任何一个输入顺序流传入Token，网关都会向后传递，不会对Token进行同步。我们使用"x"在网关内部标示出这是一个排他网关，默认情况下，我们也可以忽略标示。
        </para>
        <para>
          <emphasis>注意: </emphasis> 当排他网关(ExclusiveGateway)后面的线条都不满足的时候会抛出异常.
        </para>
      </section>
      
      <section xml:id="bpmn.ExclusiveGateway.GraphicalNotation">
        <title>图形符号</title>
        <para> 
          一个顺序流可视化作为一个从源元素对目标元素的箭头。箭头始终指向朝着既定目标。 
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.SequenceFlow.1.png"/>
          </imageobject></mediaobject>
        </para>
      </section>
      
      <section xml:id="bpmn.ExclusiveGateway.XMLRepresentation">
        <title>XML描述</title>
        <para>
          这是一个空结束事件(NoneEndEvent)的XML表示,没有任何子元素(其他开始事件类型都有一个元素声明的类型)。
          <programlisting language="xml"><![CDATA[<bpmn2:sequenceFlow id="SequenceFlow_3" name="" sourceRef="UserTask_1" targetRef="UserTask_2"/>]]></programlisting>
        </para>
      </section>
      
      <section xml:id="bpmn.ExclusiveGateway.designer">
        
        <title>设计器配置</title>
        <para> 
          <mediaobject ><imageobject>
            <imagedata align="center"  fileref="images/bpmn.SequenceFlow.2.png"/>
          </imageobject></mediaobject>
        </para>
        
      </section>
      
    </section>
    
    <section xml:id="bpmn.ParallelGateway">
      <title>Parallel Gateway</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.InclusiveGateway">
      <title>Parallel Gateway</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.ComplexGateway">
      <title>Complex Gateway</title>
      <para>
        
      </para>
    </section>

  </section>
  
  
  <section xml:id="bpmn.Tasks">
    <title>Tasks</title>
    <para>
      
    </para>
    
    <section xml:id="bpmn.UserTask">
      <title>User Task</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.ScriptTask">
      <title>Script Task</title>
      <para>
        
      </para>
    </section>
    
    
    <section xml:id="bpmn.ServiceTask">
      <title>Service Task</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.BusinessRuleTask">
      <title>Business Rule Task</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.SendTask">
      <title>Send Task</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.ReceiveTask">
      <title>Receive Task</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.ManualTask">
      <title>Manual Task</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.foreach">
      <title>Multi-instance (for each)</title>
      <para>
        
      </para>
    </section>
    
    
    
  </section>
  
  <section xml:id="bpmn.Sub-ProcessesAndCallActivities">
    <title>Sub-Processes and Call Activities</title>
    <para>
      
    </para>
    
    <section xml:id="bpmn.Sub-Process">
      <title>Sub-Process</title>
      <para>
        
      </para>
    </section>
    
    <section xml:id="bpmn.CallActivity">
      <title>Call activity (subprocess)</title>
      <para>
        
      </para>
    </section>
    
    
  </section>

  <section xml:id="bpmn.Lane">
    <title>Lane</title>
    <para>
      
    </para>
  
  </section>
  
  <section xml:id="bpmn.Data">
    <title>Data</title>
    <para>
      
    </para>
    
  </section>
  
  
  <section xml:id="bpmn.Artifacts">
    <title>Artifacts</title>
    <para>
      
    </para>
    
  </section>
  
  
  
  <section xml:id="bpmn.ExtensionElements">
    <title>扩展元素</title>
    <para>
      
    </para>
    <section xml:id="bpmn.ExtensionElements.connector">
      <title>连接器</title>
      <para>
        
      </para>
      
    </section>
    
    <section xml:id="bpmn.ExtensionElements.dataVariable">
      <title>数据变量</title>
      <para>
        
      </para>
      
    </section>
    
    <section xml:id="bpmn.ExtensionElements.skip">
      <title>跳过策略</title>
      <para>
        
      </para>
      
    </section>
    
    <section xml:id="bpmn.ExtensionElements.form">
      <title>任务表单</title>
      <para>
        
      </para>
      
    </section>
    
    <section xml:id="bpmn.ExtensionElements.taskTopic">
      <title>任务主题</title>
      <para>
        
      </para>
      
    </section>
    
    <section xml:id="bpmn.ExtensionElements.taskCommand">
      <title>处理命令</title>
      <para>
        
      </para>
      
    </section>
    
    <section xml:id="bpmn.ExtensionElements.assignPolicy">
      <title>分配策略</title>
      <para>
        
      </para>
      
    </section>
    
  </section>
  
  <section xml:id="bpmn.FixFlow.ProcessEngine">
    <title>FixFlow Engine 运行机制及原理</title>
    <section xml:id="bpmn.FixFlow.ProcessEngine.Event">
      <title>FixFlow Event</title>
      <para>
        
      </para>
      
    </section>
    
  </section>
  
  
</chapter>
