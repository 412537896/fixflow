<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<fixConfig>
	<bpaConf>
		<analysisEngine>
			<!-- 数据抽取器配置-->
			<dataFeeds>
				<!-- 抽取时间维度 ，会在全量抽取时被自行，会创建2004~2024年的时间数据 -->
				<dataFeed id="dimDateDataFeed" engine="dimDateDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
				</dataFeed>
				
				<!-- 流程定义抽取，每次抽取皆会全抽全删-->
				<dataFeed id="processDef" engine="processDefDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
				</dataFeed>
				
				<!-- 流程实例抽取，全量抽取会全删全插，增量抽取会删除所有执行中的流程实例，然后重新抽取。同时获取上次抽取最后的时间，抽取自那一时间点以后已完成的数据-->
				<dataFeed id="processInstance" engine="processInstanceDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
					<!-- 流程实例抽取语句-->
					<item>
					    <key>FIXFLOW_RUN_PROCESSINSTANECE</key>
					    <value>
					        SELECT FRP.*,FDP.PROCESS_NAME,FDP.VERSION  FROM fixflow_run_processinstanece FRP LEFT JOIN FIXFLOW_DEF_PROCESSDEFINITION FDP ON FDP.PROCESS_ID = FRP.PROCESSDEFINITION_ID
					    </value>
					</item>
					<item>
					    <key>FIXFLOW_RUN_PROCESSINSTANECE_PK</key>
					    <value>PROCESS_ID</value>
					</item>
				</dataFeed>
				
				<!-- 流程定义抽取，全量抽取会全删全插，增量抽取会删除所有执行中的任务实例，然后重新抽取。同时获取上次抽取最后的时间，抽取自那一时间点以后已完成的数据-->
				<dataFeed id="taskInstance" engine="taskInstanceDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
					<item>
						<key>primaryKey</key>
						<value>TASKINSTANCE_ID</value>
					</item>
					<!-- 任务实例抽取语句-->
					<item>
		    			<key>FIXFLOW_RUN_TASKINSTANCE</key>
		    			<!-- 此处必须要根据 PROCESSINSTANCE_ID 使数据块的PROCESSINSTANCE_ID连续-->
		    			<value>
		       	 			SELECT * FROM fixflow_run_taksinstanece WHERE ASSIGNEE IS NOT NULL 
		    			</value>
					</item>
					<!-- 更新流程实例状态-->
					<item>
						<key>updateProcessInstanceSql</key>
						<!-- 要更新的字段在代码里面自动组装 -->
						<value>UPDATE FIXBPA_FLOW_PROCESSINSTANCE SET</value>
					</item>
					<!-- 设置算是异常流程的任务命令 -->
					<item>
						<!-- 流程中命令类型的ID，多个以,(逗号)分隔 -->
						<key>commandType</key>
						<value>rollBack,rollBackTaskPreviousStep,rollBackTaskByTaskId,rollBackTaskByExpression</value>
					</item>
				</dataFeed>
				<!-- 人员抽取，始终会进行全抽全删-->
				<dataFeed id="dimUser" engine="dimUserDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
					<!-- 人员抽取语句 -->
					<item>
						<key>groupInfo</key>
						<value>
							select USERID as USERID,
							       USERNAME as USERNAME
							  from AU_USERINFO
						</value>
					</item>
				</dataFeed>
				<!-- 部门抽取，始终会进行全抽全删，这个dimOrgDataFeed可以配置多次，用于抽取不同的组织结构 -->
				<dataFeed id="dimOrg" engine="dimOrgDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
					<!-- 已经有层次的组织结构，人员信息具有从最顶层组织到它直属组织的信息都已经存在 -->
					<!-- 例子: select a as USERID,b as USERNAME, c as GROUPID , d as GROUPNAME, e as PARENTGROUPID, f as GROUPTYPE, g as ISPROPERTY from xxxx  -->
					<!-- ISPROPERTY 标识当前用户和组织是否是直属的关系，1表示直属，0表示非直属 -->
					<!-- 设置是否是层次数据，比如用户a和部门a建立了关联，而部门a其实是部门b的子部门，那么在抽取过来时就会同时建立用户a与部门b的关联 -->
					<item>
						<key>hasLevelGroup</key>
						<!-- true 标识有层次结构的数据，false标识无层次结构的数据，如果不填写默认为true -->
						<value>true</value>
					</item>
					
					<!-- 抽取时删除组织机构表的条件-->
					<item>
						<key>deleteCondition</key>
						<value>GROUPTYPE='org'</value>
					</item>
					<!-- 只存在人员信息和它直属组织的关系，并且组织之间具有父子关系 -->
					<!-- 组织之间的父子关系 -->
					<item>
						<key>department</key>
						<value>select ORGID as GROUPID, ORGNAME as GROUPNAME, SUPORGID as PARENTGROUPID,'org' as GROUPTYPE from AU_ORGINFO</value>
					</item>
					<!-- 人员信息和组织的直属关系 -->
					<item>
						<key>groupInfo</key>
						<value>
				              select t1.USERID as USERID,
				                     t3.USERNAME as USERNAME,
				                     t1.ORGID as GROUPID,
				                     t2.orgname as GROUPNAME,
				                     t2.suporgid as PARENTGROUPID,
				                     'org' as GROUPTYPE
				                from AU_ORGMEMBER t1, AU_ORGINFO t2, AU_USERINFO t3
				               where t1.orgid = t2.orgid
				                 and t1.USERID = t3.userid
						</value>
					</item>
				</dataFeed>
				
				<!-- 角色抽取，始终会进行全抽全删，这个dimOrgDataFeed可以配置多次，用于抽取不同的组织结构 -->
				<dataFeed id="dimRole" engine="dimOrgDataFeed">
					<!-- 触发器设置 -->
					<tigger value="234"/>
					<!-- 工作区数据源设置 -->
					<workspace>
						<source key="bpmDB" value="DB_BPA_BASE"/>
					</workspace>
					<!-- 发布目标数据源-->
					<outPutDB value="DB_BPA_BASE2"/>
					<!-- 已经有层次的组织结构，人员信息具有从最顶层组织到它直属组织的信息都已经存在 -->
					<!-- 例子: select a as USERID,b as USERNAME, c as GROUPID , d as GROUPNAME, e as PARENTGROUPID, f as GROUPTYPE, g as ISPROPERTY from xxxx  -->
					<!-- ISPROPERTY 标识当前用户和组织是否是直属的关系，1表示直属，0表示非直属 -->
					<!-- 设置是否是层次数据，比如用户a和部门a建立了关联，而部门a其实是部门b的子部门，那么在抽取过来时就会同时建立用户a与部门b的关联，这里是角色，角色本身没有层级，所以不需要做这个层级处理 -->
					<item>
						<key>hasLevelGroup</key>
						<!-- true 标识有层次结构的数据，false标识无层次结构的数据，如果不填写默认为true -->
						<value>false</value>
					</item>
					<!-- 抽取时删除组织机构表的条件-->
					<item>
						<key>deleteCondition</key>
						<value>GROUPTYPE='role'</value>
					</item>
					<!-- 人员信息和组织的直属关系 -->
					<item>
						<key>groupInfo</key>
						<value>
				              select t1.USERID as USERID,
				                     t3.USERNAME as USERNAME,
				                     t1.ROLEID as GROUPID,
				                     t2.NAME as GROUPNAME,
				                     '' as PARENTGROUPID,
				                     'role' as GROUPTYPE
				                     
				                from AU_ROLEMEMBER t1, AU_ROLEINFO t2, AU_USERINFO t3
				               where t1.ROLEID = t2.ROLEID
				                 and t1.USERID = t3.userid
						</value>
					</item>
				</dataFeed>
				
			</dataFeeds>
			<!-- 数据发布器设置-->
			<dataPushers>
				<dataPusher id="analysisDataPusher" engine="analysisDataPusherDB">
				<!-- 发布成Excel engine = "analysisDataPusherExcel" 
				 	   发布成数据库 engine = "analysisDataPusherDB"-->
				 	<!-- 触发器设置 -->
					<tigger value="234"/>
					<workspace>
						<source key="bpmDB" value="BPA_OLAP_DS"/>
					</workspace>
					
					<outPutDB value="DB_BPA_BASE2"/>
					<!-- 发布成Excel value设置为Excel文件目录 
				 	   发布成数据库 value设置为数据库源-->
					
					<mdx id="1.1" target="olap1">
					<!-- 发布成Excel target为sheet页的名字
				 	   发布成数据库 target为表名
				 	   添加parentId属性，设置成其他mdx的id可以添加父关系-->
				 	   
						<columns>
							<column id="PROCESS_NAME" targetId="process_name" type="varchar(50)"/>
							<!-- id是所要取值的列的名字，对应<content>里的mdx语句
								 targetId是对应数据库表的列名，或者是Excel的列名
								 type为数据的标准数据类型，如果发布成Excel，设置为“Double”则为数字类型，其他都为默认字符串类型-->
							
							<column id="ALL_COUNT" targetId="all_count" type="varchar(50)"/>						
						</columns>
						<content>
							select {Measures.[ALL_COUNT]} ON COLUMNS, 
							{[PROCESSDEFINITION_DEFKEY].MEMBERS} ON ROWS 
							from PROCESSINSTANCE_CUBE  							
						</content>
					</mdx>
		 		
					<mdx id="1.2"  target="olap2">
						<columns>
							<column id="PROCESSDEFINITION_ID" targetId="processdefinition_id" type="varchar(500)"/>
							<column id="PROCESS_NAME" targetId="process_name" type="varchar(50)"/>
							<column id="ALL_COUNT" targetId="all_count" type="numeric(18,0)"/>						
						</columns>
						<content>
							select {Measures.[ALL_COUNT]} ON COLUMNS, 
							{[PROCESSDEFINITION_DEFKEY].[ApplyBusinessCard].CHILDREN} ON ROWS 
							from PROCESSINSTANCE_CUBE  							
						</content>
					</mdx>
		<!--	-->								
					<mdx id="2.1" parentId = "1.2" target="olap3">
						<columns>
							<column id="NODE_ID" targetId="node_id" type="varchar(50)"/>
							<column id="NODE_NAME" targetId="node_name" type="varchar(50)"/>
							<column id="ALL_COUNT" targetId="all_count" type="numeric(18,0)"/>						
						</columns>
						<content>
							select {Measures.[ALL_COUNT], Measures.[DONE_COUNT]} ON COLUMNS, 
							{PROCESS_DEF.[PROCESSDEFINITION_ID].[{$parentMDX.PROCESSDEFINITION_ID}].CHILDREN} ON ROWS 
							from task_instance_cube  							
						</content>
					</mdx>	
					
					<mdx id="3.1" parentId = "2.1" target="olap4">
						<columns>							
							<column id="NODE_ID" targetId="node_id" type="varchar(50)"/>	
							<column id="USER_NAME" targetId="user_name" type="varchar(50)"/>						
							<column id="ALL_COUNT" targetId="all_count" type="numeric(18,0)"/>						
						</columns>
						<content>
							select {Measures.[ALL_COUNT],Measures.[DONE_COUNT]} ON COLUMNS,
							Filter([USER_ID].MEMBERS,Measures.[ALL_COUNT] >0) ON ROWS 
							from task_instance_cube  
							where ([PROCESSDEFINITION_ID].[ApplyBusinessCard:1:3ce5ad1c-cb9e-4169-a720-3287f2669e05].[{$parentMDX.NODE_ID}])							
						</content>
					</mdx>	
					
					<mdx id="3.2" parentId = "2.1" target="olap2">
						<columns>
							<column id="PROCESSDEFINITION_ID" targetId="processdefinition_id" type="varchar(500)"/>
							<column id="PROCESS_NAME" targetId="process_name" type="varchar(50)" />
							<column id="ALL_COUNT" targetId="all_count" type="numeric(18,0)"/>						
						</columns>
						<content>
							select {Measures.[ALL_COUNT]} ON COLUMNS, 
							{[PROCESSDEFINITION_DEFKEY].[applycar].CHILDREN} ON ROWS 
							from PROCESSINSTANCE_CUBE  							
						</content>
					</mdx>
			
				</dataPusher>
			</dataPushers>
		</analysisEngine>
	</bpaConf>
</fixConfig>
